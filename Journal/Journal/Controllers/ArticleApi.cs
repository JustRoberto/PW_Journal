/*
 * The Yearly Journal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Models;
using Microsoft.EntityFrameworkCore;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ArticleApiController : ControllerBase
    {

        private readonly Journal.Controllers.Context _context;

        public ArticleApiController(Journal.Controllers.Context context)
        {
            _context = context;
        }

        /// <summary>
        /// Create a new article in a volume with the given ID
        /// </summary>
        /// <param name="volumeId">ID of the volume to create an article in</param>
        /// <param name="apiKey">API key for authorization</param>
        /// <param name="articleData">JSON object containing article data</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/api/volume/{volumeId}/article")]
        public async Task<ActionResult<Article>> CreateVolumeArticle([FromRoute][Required]long? volumeId, [FromHeader][Required()]string apiKey, [FromQuery][Required()]Volume articleData)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            Article art = new Article() { Author = "John", Id = 2, Title = "33 days", Url = "whatev" };
            _context.Articles.Add(art);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            return art;
        }

        /// <summary>
        /// Get a list of articles in a specific volume
        /// </summary>
        /// <param name="volumeId">ID of the volume to retrieve articles from</param>
        /// <response code="200">OK</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/api/volume/{volumeId}/articles")]
        public async Task<ActionResult<IEnumerable<Article>>> GetVolumeArticles([FromRoute][Required]long? volumeId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            Article art = new Article() { Author = "John", Id = 2, Title = "33 days", Url = "whatev", VolumeId= 23 };
            Article art2 = new Article() { Author = "Andrey", Id = 4, Title = "BLA BLA", Url = "RICK", VolumeId = 23 };
            _context.Articles.Add(art);
            _context.Articles.Add(art2);
             _context.SaveChanges();
            return  await _context.Articles.ToListAsync();
        }

        /// <summary>
        /// Delete an article
        /// </summary>
        /// <remarks>Delete an article with the given ID in a volume with the given ID</remarks>
        /// <param name="volumeId">ID of the volume</param>
        /// <param name="articleId">ID of the article</param>
        /// <response code="204">Article deleted successfully</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Volume or article not found</response>
        [HttpDelete]
        [Route("/api/volume/{volumeId}/article/{articleId}")]
        public virtual IActionResult VolumeVolumeIdArticleArticleIdDelete([FromRoute][Required]int? volumeId, [FromRoute][Required]int? articleId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get details of a specific article in a specific volume
        /// </summary>
        /// <remarks>Get details of a specific article in a specific volume</remarks>
        /// <param name="volumeId">ID of the volume</param>
        /// <param name="articleId">ID of the article</param>
        /// <response code="200">Article details</response>
        /// <response code="404">Article not found</response>
        [HttpGet]
        [Route("/api/volume/{volumeId}/article/{articleId}")]
        public virtual IActionResult VolumeVolumeIdArticleArticleIdGet([FromRoute][Required]int? volumeId, [FromRoute][Required]int? articleId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Article));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 1,\n  \"title\" : \"First Article\",\n  \"author\" : \"John Doe\",\n  \"url\" : \"localhost/pdfs/pdf1.pdf\",\n  \"volume_id\" : 12\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Article>(exampleJson)
                        : default(Article);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update details of an article
        /// </summary>
        /// <remarks>Update details of an article with the given ID in a volume with the given ID</remarks>
        /// <param name="body"></param>
        /// <param name="volumeId">ID of the volume</param>
        /// <param name="articleId">ID of the article</param>
        /// <response code="200">Article updated successfully</response>
        /// <response code="400">Invalid request body</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Volume or article not found</response>
        [HttpPut]
        [Route("/api/volume/{volumeId}/article/{articleId}")]
        public virtual IActionResult VolumeVolumeIdArticleArticleIdPut([FromBody]Article body, [FromRoute][Required]int? volumeId, [FromRoute][Required]int? articleId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Article));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 1,\n  \"title\" : \"First Article\",\n  \"author\" : \"John Doe\",\n  \"url\" : \"localhost/pdfs/pdf1.pdf\",\n  \"volume_id\" : 12\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Article>(exampleJson)
                        : default(Article);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
