/*
 * The Yearly Journal
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VolumeApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new volume to the Journal
        /// </summary>
        /// <remarks>Add a new volume to the Journal</remarks>
        /// <param name="body">Create a new volume in the Journal</param>
        /// <response code="200">Successful operation</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/api/volume")]
        public virtual IActionResult AddVolume([FromBody]Volume body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Volume));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);
            string exampleJson = null;
            exampleJson = "{\n  \"year\" : 2020,\n  \"name\" : \"doggie\",\n  \"id\" : 10\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Volume>(exampleJson)
                        : default(Volume);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes a volume
        /// </summary>
        /// <remarks>delete a volume</remarks>
        /// <param name="volumeId">Volume id to delete</param>
        /// <param name="apiKey"></param>
        /// <response code="400">Invalid volume value</response>
        [HttpDelete]
        [Route("/api/volume/{volumeId}")]
        public virtual IActionResult DeleteVolume([FromRoute][Required]long? volumeId, [FromHeader]string apiKey)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Finds Volumes by year
        /// </summary>
        /// <remarks>Multiple year values can be provided with comma separated strings</remarks>
        /// <param name="year">Year values that need to be considered for filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid year value</response>
        [HttpGet]
        [Route("/api/volume/findByYear/{year}")]
        public virtual IActionResult FindVolumesByYear([FromRoute][Required]int? year)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Volume>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"year\" : 2020,\n  \"name\" : \"doggie\",\n  \"id\" : 10\n}, {\n  \"year\" : 2020,\n  \"name\" : \"doggie\",\n  \"id\" : 10\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Volume>>(exampleJson)
                        : default(List<Volume>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find Volume by ID
        /// </summary>
        /// <remarks>Returns a single volume</remarks>
        /// <param name="volumeId">ID of volume to return</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Volume not found</response>
        [HttpGet]
        [Route("/api/volume/{volumeId}")]
        public virtual IActionResult GetVolumeById([FromRoute][Required]long? volumeId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Volume));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"year\" : 2020,\n  \"name\" : \"doggie\",\n  \"id\" : 10\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Volume>(exampleJson)
                        : default(Volume);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update an existing volume
        /// </summary>
        /// <remarks>Update an existing volume by Id</remarks>
        /// <param name="body">Update an existent volume</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Volume not found</response>
        /// <response code="405">Validation exception</response>
        [HttpPut]
        [Route("/api/volume")]
        public virtual IActionResult UpdateVolume([FromBody]Volume body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Volume));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);
            string exampleJson = null;
            exampleJson = "{\n  \"year\" : 2020,\n  \"name\" : \"doggie\",\n  \"id\" : 10\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Volume>(exampleJson)
                        : default(Volume);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates a volume in the Journal with form data
        /// </summary>
        /// <param name="volumeId">ID of volume that needs to be updated</param>
        /// <param name="name">Name of volume that needs to be updated</param>
        /// <param name="year">Year of volume that needs to be updated</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/api/volume/{volumeId}")]
        public virtual IActionResult UpdateVolumeWithForm([FromRoute][Required]long? volumeId, [FromQuery]string name, [FromQuery]int? year)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);

            throw new NotImplementedException();
        }
    }
}
